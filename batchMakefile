SHELL:=/bin/bash
SIMTREE:=simCtrl_simTree.py
RUNSIM:=simCtrl_runSim.py
GPARAMS:=/cluster/home/dearl/evolver/myToy/gParams/
TOY_ROOT:=/cluster/home/dearl/evolver/myToy/root/
AVG_ROOT:=/cluster/home/dearl/simTreeWorking/avgRoot/
# TREE_AVG_PRIMATES:=((evoGorGor1:0.008825,(evoHg19:0.0067,evoPanTro2:0.006667)evoHg19-evoPanTro2:0.00225)eG-eH-eC:0.00968,evoPonAbe2:0.018318);
# TREE_AVG_MAMMALS:=((evoBosTau4:0.18908,evoCanFam2:0.16303)evoBosTau4-evoCanFam2:0.032898,(evoHg19:0.144018,(evoMm9:0.084509,evoRn4:0.091589)evoMm9-evoRn4:0.271974)eH-eM-eR:0.020593);
TREE_AVG_PRIMATES:=((simGorilla:0.008825,(simHuman:0.0067,simChimp:0.006667)sHuman-sChimp:0.00225)sG-sH-sC:0.00968,simOrang:0.018318);
TREE_AVG_MAMMALS:=((simCow:0.18908,simDog:0.16303)sCow-sDog:0.032898,(simHuman:0.144018,(simMouse:0.084509,simRat:0.091589)sMouse-sRat:0.271974)sH-sM-sR:0.020593);
STEP_AVG_PRIMATES:=0.0005
STEP_AVG_MAMMALS:=0.01
AVG_PRIMATES_JOBTREE:=/hive/users/dearl/simTreeWorking/jobTreeAvgPrimates
AVG_MAMMALS_JOBTREE:=/hive/users/dearl/simTreeWorking/jobTreeAvgMammals
TREE_UTENSILSET:=(Knife:0.004, (Fork:0.003, (Ladle:0.002, (Spoon:0.001, Teaspoon:0.001)S-TS:.001)S-TS-Ladle:.001)S-TS-L-F:0.001);
TREE_PRIMATES:=((human:0.006690,chimp:0.007571)human-chimp:0.024272,(colobus_monkey:0.015404,(baboon:0.008258,macaque:0.028617)baboon-macaque:0.008519)-colo-bab-mac:0.022120)all:0.023960;
WORKING_JOBTREE:=/hive/users/dearl/simTreeWorking/myTree
PRIMATE_JOBTREE:=/hive/users/dearl/simTreeWorking/primateJobTree
OUT_AVG_PRIMATES:=/hive/users/dearl/simTreeWorking/AVG_PRIMATES/
OUT_AVG_MAMMALS:=/hive/users/dearl/simTreeWorking/AVG_MAMMALS/
RAND:=$(shell date '+%s' | perl -ple 's/^\d{6}//;')
UTENSILSET_JOBTREE:=/hive/users/dearl/simTreeWorking/utensilJobTree$(RAND)
UTENSILSET_NETDISK:=/hive/users/dearl/simTreeWorking/utensilNetDisk
OUT_UTENSILSET:=/hive/users/dearl/simTreeWorking/UTENSILS/

default:
	cat Makefile
##############################
# README - dent earl, 9 december 2009
#  This file is used for repetitive tests. There are four types of tests,
#   - Production tests, which are full scale simulations using toy data input. Uses either
#     parasol or standAlone, depending.
#   - Parasol (cluster) tests, which use jobTree.py and uses mkdir as a standin for a cycle
#   - Single Machine tests, which use jobTree.py and uses mkdir as a standin for a cycle
#   - Stand Alone tests, which do NOT use jobTree.py and uses mkdir as a standin for a cycle
#
#  There are two data types for the tests,
#   - Primate tests, which simulate a set of genomes based on a primate tree
#
##############################

##############################
# PRODUCTION
##############################
avgPrimates:
	jobTree.py --jobTree ${AVG_PRIMATES_JOBTREE} --batchSystem=parasol --command="${RUNSIM} --parent ${AVG_ROOT} --params ${GPARAMS} --tree '${TREE_AVG_PRIMATES}' --step ${STEP_AVG_PRIMATES} --out ${OUT_AVG_PRIMATES} --jobFile JOB_FILE --saveParent --seed 313370" --logDebug --retryCount 0
avgMammals:
	jobTree.py --jobTree ${AVG_MAMMALS_JOBTREE}  --batchSystem=parasol --command="${RUNSIM} --parent ${AVG_ROOT} --params ${GPARAMS} --tree '${TREE_AVG_MAMMALS}'  --step ${STEP_AVG_MAMMALS}  --out ${OUT_AVG_MAMMALS}  --jobFile JOB_FILE --saveParent --seed 13371121" --logDebug --retryCount 0

##############################
# PARASOL TESTS (jobTree)
##############################
test:
	jobTree.py --jobTree ${UTENSILSET_JOBTREE} --batchSystem=parasol --command="${RUNSIM} --parent ${TOY_ROOT} --params ${GPARAMS} --tree '${TREE_UTENSILSET}' --step 0.001 --out ${OUT_UTENSILSET} --jobFile JOB_FILE --logBranch --saveParent --seed 1" --logDebug --retryCount 0

##############################
# SINGLE MACHINE TESTS (jobTree)
##############################
test:
	jobTree.py --jobTree ${UTENSILSET_JOBTREE} --batchSystem=single_machine --command="${RUNSIM} --parent ${TOY_ROOT} --params ${GPARAMS} --tree '${TREE_UTENSILSET}' --step 0.001 --out ${OUT_UTENSILSET} --jobFile JOB_FILE --logBranch --saveParent --seed 1" --logDebug --retryCount 0

##############################
# not run in screen, run on hgwdev:
##############################
repeatMaskPreRun:
	simUtil_evolverFASTAextractor.py --simDir ${OUT_AVG_PRIMATES} --leavesOnly

##############################
# CACTUS (Reconstruction) MUST BE RUN ON A CLUSTER, IN GNU SCREEN!!
##############################
repeatMaskCancer:
# not sure how to know (in an automated fashion) that the repeatMasking are all done...
	repeatMasking_doCluster.py --genome ${OUT_CANCERTEAM}/Chris/seq.name.fa --workDir ${OUT_CANCERTEAM}/Chris/repeatMask --maxJob=80 &>/dev/null & 
	repeatMasking_doCluster.py --genome ${OUT_CANCERTEAM}/Jing/seq.name.fa  --workDir ${OUT_CANCERTEAM}/Jing/repeatMask  --maxJob=80 &>/dev/null &
	repeatMasking_doCluster.py --genome ${OUT_CANCERTEAM}/Steve/seq.name.fa --workDir ${OUT_CANCERTEAM}/Steve/repeatMask --maxJob=80 &>/dev/null &
	repeatMasking_doCluster.py --genome ${OUT_CANCERTEAM}/Zack/seq.name.fa  --workDir ${OUT_CANCERTEAM}/Zack/repeatMask  --maxJob=80 &>/dev/null &
repeatMaskCancerFinish:
	for a in $(ls ${OUT_CANCERTEAM}/); do if [ -d ${OUT_CANCERTEAM}/$$a ]; then if [ -d ${OUT_CANCERTEAM}/$$a/repeatMask ]; \
	then twoBitToFa ${OUT_CANCERTEAM}/$$a/repeatMask/seq.rmsk.2bit ${OUT_CANCERTEAM}/$$a/seq.masked.fa;\
	fi; fi; done
#	eval_fastaNameCorrector.py --name $$a < ${OUT_CANCERTEAM}/$$a/seq.masked.fa > ${OUT_CANCERTEAM}/$$a/seq.masked.clean.fa; 
sonTraceCancer:
	jobTree.py --batchSystem=parasol --command  "cactus_workflow.py --netDisk ${CANCER_NETDISK} --speciesTree '${TREE_CANCERTEAM}' \
	${OUT_CANCERTEAM}/Jing/seq.masked.clean.fa \
	${OUT_CANCERTEAM}/Steve/seq.masked.clean.fa \
	${OUT_CANCERTEAM}/Zack/seq.masked.clean.fa \
	${OUT_CANCERTEAM}/Chris/seq.masked.clean.fa --job JOB_FILE" --jobTree ${CANCER_JOBTREE} --logDebug
	eval_evolverPairwiseExtractor.py --cycleDir ${OUT_CANCERTEAM} --leavesOnly
	cactus_MAFGenerator --netDisk ${CANCER_NETDISK} --outputFile ${OUT_CANCERTEAM}/reconstruction.maf --netName 0 --logLevel DEBUG
	for a in $$(ls ${OUT_CANCERTEAM}/*.clean.maf); do (eval_MAFComparator --logLevel DEBUG --mAFFile1 $$a \
	--mAFFile2 ${OUT_CANCERTEAM}/reconstruction.maf --outputFile $$a.compare.xml --sampleNumber 1000000 &) ; done
	eval_cycleStats.sh ${OUT_CANCERTEAM}
	cactus_treeStats --netDisk ${CANCER_NETDISK} --netName 0 --outputFile ${OUT_CANCERTEAM}/cactusTreeStats.xml

##############################
# UTILITIES
##############################
extractCancerMAFs:
	evolver_pairwiseExtractor.py --cycleDir ${OUT_CANCERTEAM} --leavesOnly
