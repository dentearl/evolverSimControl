SHELL:=/bin/bash
SIMTREE:=simCtrl_simTree.py
RUNSIM:=simCtrl_runSim.py
GPARAMS:=/cluster/home/dearl/simTreeWorking/gParams/
GPARAMS30:=/cluster/home/dearl/simTreeWorking/gParams30/
TOY_ROOT:=/cluster/home/dearl/evolver/myToy/root/
AVG_ROOT:=/cluster/home/dearl/simTreeWorking/avgRoot/
TREE_AVG_PRIMATES:=((simGorilla:0.008825,(simHuman:0.0067,simChimp:0.006667)sHuman-sChimp:0.00225)sG-sH-sC:0.00968,simOrang:0.018318);
TREE_AVG_MAMMALS:=((simCow:0.18908,simDog:0.16303)sCow-sDog:0.032898,(simHuman:0.144018,(simMouse:0.084509,simRat:0.091589)sMouse-sRat:0.271974)sH-sM-sR:0.020593);
TREE_UTENSILSET:=(Knife:0.004, (Fork:0.003, (Ladle:0.002, (Spoon:0.001, Teaspoon:0.001)S-TS:.001)S-TS-L:.001)S-TS-L-F:0.001);
STEP_AVG_PRIMATES:=0.0005
STEP_AVG_MAMMALS:=0.01
AVG_PRIMATES_JOBTREE:=/hive/users/dearl/simTreeWorking/jobTreeAvgPrimates
AVG_PRIMATES_JOBTREE30:=/hive/users/dearl/simTreeWorking/jobTreeAvgPrimates30
AVG_MAMMALS_JOBTREE:=/hive/users/dearl/simTreeWorking/jobTreeAvgMammals
WORKING_JOBTREE:=/hive/users/dearl/simTreeWorking/myTree
PRIMATE_JOBTREE:=/hive/users/dearl/simTreeWorking/primateJobTree
OUT_AVG_PRIMATES:=/hive/users/dearl/simTreeWorking/AVG_PRIMATES/
OUT_AVG_PRIMATES30:=/hive/users/dearl/simTreeWorking/AVG_PRIMATES30/
OUT_AVG_MAMMALS:=/hive/users/dearl/simTreeWorking/AVG_MAMMALS/
RAND:=$(shell date '+%s' | perl -ple 's/^\d{6}//;')
UTENSILSET_JOBTREE:=/hive/users/dearl/simTreeWorking/utensilJobTree$(RAND)
UTENSILSET_NETDISK:=/hive/users/dearl/simTreeWorking/utensilNetDisk
OUT_UTENSILSET:=/hive/users/dearl/simTreeWorking/UTENSILS/

default:
	cat Makefile
##############################
# README - dent earl, 9 december 2009
#  This file is used for repetitive tests. There are four types of tests,
#   - Production tests, which are full scale simulations using toy data input. Uses either
#     parasol or standAlone, depending.
#   - Parasol (cluster) tests, which use jobTree.py and uses mkdir as a standin for a cycle
#   - Single Machine tests, which use jobTree.py and uses mkdir as a standin for a cycle
#   - Stand Alone tests, which do NOT use jobTree.py and uses mkdir as a standin for a cycle
#
#  There are two data types for the tests,
#   - Primate tests, which simulate a set of genomes based on a primate tree
#
##############################

##############################
# PRODUCTION
avgPrimates:
	jobTree.py --jobTree ${AVG_PRIMATES_JOBTREE} --batchSystem=parasol --command="${RUNSIM} --parent ${AVG_ROOT} --params ${GPARAMS} --tree '${TREE_AVG_PRIMATES}' --step ${STEP_AVG_PRIMATES} --out ${OUT_AVG_PRIMATES} --jobFile JOB_FILE --saveParent --seed 313370" --logDebug --retryCount 0
avgMammals:
	jobTree.py --jobTree ${AVG_MAMMALS_JOBTREE}  --batchSystem=parasol --command="${RUNSIM} --parent ${AVG_ROOT} --params ${GPARAMS} --tree '${TREE_AVG_MAMMALS}'  --step ${STEP_AVG_MAMMALS}  --out ${OUT_AVG_MAMMALS}  --jobFile JOB_FILE --saveParent --seed 13371121" --logDebug --retryCount 0
avgPrimates30:
	jobTree.py --jobTree ${AVG_PRIMATES_JOBTREE30} --batchSystem=parasol --command="${RUNSIM} --parent ${TOY_ROOT} --params ${GPARAMS30} --tree '${TREE_AVG_PRIMATES}' --step ${STEP_AVG_PRIMATES} --out ${OUT_AVG_PRIMATES30} --jobFile JOB_FILE --saveParent --seed 313370" --logDebug --retryCount 0

##############################
# PARASOL TESTS (jobTree)
test:
	jobTree.py --jobTree ${UTENSILSET_JOBTREE} --batchSystem=parasol --command="${RUNSIM} --parent ${TOY_ROOT} --params ${GPARAMS} --tree '${TREE_UTENSILSET}' --step 0.001 --out ${OUT_UTENSILSET} --jobFile JOB_FILE --logBranch --saveParent --seed 1" --logDebug --retryCount 0

##############################
# SINGLE MACHINE TESTS (jobTree)
testSingle:
	jobTree.py --jobTree ${UTENSILSET_JOBTREE} --batchSystem=single_machine --command="${RUNSIM} --parent ${TOY_ROOT} --params ${GPARAMS} --tree '${TREE_UTENSILSET}' --step 0.001 --out ${OUT_UTENSILSET} --jobFile JOB_FILE --logBranch --saveParent --seed 1" --logDebug --retryCount 0

##############################
# first post-processing, need not be run in screen, need not be run on cluster:
repeatMaskPreRun:
	simUtil_evolverFASTAextractor.py --simDir ${OUT_AVG_PRIMATES} --leavesOnly

##############################
# final post-processesing MUST BE RUN ON A CLUSTER, IN GNU SCREEN!!
repeatMaskPrimates:
	simCtrl_postSimRepeatMaskCluster.py --simDir ${OUT_AVG_PRIMATES} --log --wait; simCtrl_postSimRepeatMaskFinish.py --simDir ${OUT_AVG_PRIMATES}

##############################
# UTILITIES # RUN THIS ON KOLOSSUS OR HGWDEV. mafJoin has massive memory requirements when the mafs start to get big!
extractMAFsPrimates:
	jobTree.py --jobTree jobTreeMAFextraction$(RAND) --batchSystem=single_machine --command="simCtrl_postSimMAFextractor.py --simDir ${OUT_AVG_PRIMATES} --noParalogy --jobFile JOB_FILE" --logDebug --retryCount 0
